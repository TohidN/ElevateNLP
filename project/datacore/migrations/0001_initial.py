# Generated by Django 4.1.4 on 2022-12-19 11:45

import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
import mptt.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("values", models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="Axiom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("attributes", models.ManyToManyField(to="datacore.attribute")),
            ],
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                ("version", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("native_name", models.CharField(max_length=256)),
                ("en_name", models.CharField(max_length=256)),
                ("native_speakers", models.IntegerField(default=0)),
                (
                    "alpha2",
                    models.CharField(blank=True, max_length=2, null=True, unique=True),
                ),
                (
                    "alpha3b",
                    models.CharField(blank=True, max_length=3, null=True, unique=True),
                ),
                (
                    "alpha3t",
                    models.CharField(blank=True, max_length=3, null=True, unique=True),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="NamedEntity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text",
                    django.contrib.postgres.fields.citext.CICharField(max_length=2048),
                ),
                (
                    "ne_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ARTIFACT", "Artifacts"),
                            ("CARDINAL", "Cardinal"),
                            ("DATE", "Date"),
                            ("DOCUMENT", "Documents"),
                            ("EVENT", "Event"),
                            ("FACILITY", "Facility"),
                            ("GEOGRAPHICAL.LOCATION", "Geographical Location"),
                            ("GPE", "Geopolitical Entity"),
                            ("GROUP", "Group(nationality, religion,...)"),
                            ("LANGUAGE", "Language"),
                            ("LAW", "Law"),
                            ("MONEY", "Money"),
                            ("NAT", "Natural Phenomenon"),
                            ("ORDINAL", "Ordinal"),
                            ("ORGANIZATION", "Organization"),
                            ("PERCENT", "Percentage"),
                            ("PERSON", "Person"),
                            ("PRODUCT", "Product"),
                            ("QUANTITY", "Quantity"),
                            ("TIME", "Time"),
                            ("PRODUCT.VER", "Versioned Product"),
                            ("WORK_OF_ART", "Work of art"),
                        ],
                        max_length=64,
                        null=True,
                    ),
                ),
                ("frequency_distribution", models.BigIntegerField(default=0)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ne_children",
                        to="datacore.namedentity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Phrase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(default="")),
                (
                    "words_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=2048),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "lemmas_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=2048),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "entities_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=2048),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("data", models.JSONField(default=dict)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
            ],
            options={
                "unique_together": {("text", "language")},
            },
        ),
        migrations.CreateModel(
            name="PhraseRelationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=2048, unique=True)),
                ("description", models.TextField(default="")),
            ],
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                ("url", models.URLField(blank=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Relation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "concepts",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.BigIntegerField(), default=list, size=2
                    ),
                ),
                (
                    "relation_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("VERB_GROUP", "belong to verb group of"),
                            ("CAUSES", "causes"),
                            ("ENTAILMENTS", "entails"),
                            ("ATTRIBUTES", "has the attribute"),
                            ("HYPONYM", "is a kind of"),
                            ("MEMBER_HOLONYM", "is a member of"),
                            ("PART_HOLONYM", "is a part of"),
                            ("SUBSTANCE_HOLONYM", "is a substance of"),
                            ("INSTANCE_OF", "is an instance of"),
                            ("CAUSED", "is caused by"),
                            ("ALSO_SEES", "is related to"),
                            ("REGION_DOMAINS", "is relatet to region"),
                            ("SIMILAR_TOS", "is similar to"),
                            ("TOPIC_DOMAINS", "is under topic domain of"),
                            ("USAGE_DOMAINS", "linguistically is a"),
                            ("MANNER", "manner"),
                            ("MATERIAL", "material"),
                            ("NEG_BENEFICIARY", "negative beneficiary"),
                            ("PARTICIPANT", "participant"),
                            ("POS_BENEFICIARY", "positive beneficiary"),
                            ("SECONDARY_PARTICIPANT", "Secondary participant"),
                            ("STATE", "state"),
                        ],
                        max_length=64,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Restriction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=1024)),
                ("statements", models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=1024)),
                ("statements", models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="Word",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text",
                    django.contrib.postgres.fields.citext.CICharField(max_length=64),
                ),
                ("frequency_distribution", models.BigIntegerField(default=0)),
                ("lemma_frequency_distribution", models.BigIntegerField(default=0)),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
            ],
            options={
                "unique_together": {("text", "language")},
            },
        ),
        migrations.CreateModel(
            name="WordCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "words",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.BigIntegerField(), default=list, size=2
                    ),
                ),
                (
                    "collection_type",
                    models.CharField(
                        choices=[
                            ("NGRAM", "N-Gram"),
                            ("POS_NGRAM", "Part Of Speech N-grams"),
                            ("SEMANTIC_NGRAM", "Semantic n-gram"),
                            ("SYNTATIC_NGRAM", "Syntactic n-grams"),
                        ],
                        default="NGRAM",
                        max_length=64,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WordRelationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=2048, unique=True)),
                ("description", models.TextField(default="")),
                (
                    "direction_type",
                    models.CharField(
                        blank=True,
                        choices=[("d", "Directed"), ("u", "Undirected")],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("descriptor", models.CharField(blank=True, max_length=2048)),
                ("reverse_descriptor", models.CharField(blank=True, max_length=2048)),
                ("data", models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="WordRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "words",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.BigIntegerField(), default=list, size=2
                    ),
                ),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "word_relation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.wordrelationtype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WordList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=2048)),
                ("description", models.TextField(default="")),
                ("words", models.ManyToManyField(blank=True, to="datacore.word")),
            ],
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=1024, null=True)),
                ("pos", models.TextField()),
                ("xpos", models.TextField(blank=True, null=True)),
                ("feats", models.TextField(blank=True, null=True)),
                ("constituency", models.TextField(blank=True, null=True)),
                ("dep", models.TextField(blank=True, null=True)),
                (
                    "phrase_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("None", "declarative"),
                            ("None", "exclamative"),
                            ("None", "Expressed Condition"),
                            ("None", "Imperative"),
                            ("None", "Incomplete"),
                            ("None", "Interrogative"),
                            ("PROVERB", "Proverb"),
                            ("EXPS", "Expression"),
                            ("IDM", "Idiom"),
                            ("PRVB", "Proveb"),
                            ("SYNG", "Saying"),
                            ("SLNG", "Slang"),
                            ("REFERENCE", "Reference"),
                        ],
                        max_length=64,
                        null=True,
                    ),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="t_children",
                        to="datacore.template",
                    ),
                ),
            ],
            options={
                "unique_together": {("pos", "language")},
            },
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=1024)),
                ("description", models.TextField()),
                (
                    "expression",
                    models.CharField(
                        choices=[("a", "Adjective"), ("n", "Noun")],
                        default="n",
                        max_length=1,
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.property",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhraseRelations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.JSONField(default=dict)),
                (
                    "phrase_relation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.phraserelationtype",
                    ),
                ),
                (
                    "phrases",
                    models.ManyToManyField(
                        related_name="related_phrase", to="datacore.phrase"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhraseCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=1024, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                ("phrases", models.ManyToManyField(to="datacore.phrase")),
            ],
        ),
        migrations.CreateModel(
            name="Example",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(null=True)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
                (
                    "word",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datacore.word",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DomainOntology",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=1024, null=True)),
                ("description", models.TextField(default="")),
                (
                    "ontology_domain",
                    models.IntegerField(
                        choices=[(1, "Upper Ontology"), (2, "Domain Ontology")],
                        default=1,
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.domainontology",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField(null=True)),
                ("content", models.TextField(default="")),
                ("raw_content", models.TextField(blank=True, null=True)),
                ("topic", models.TextField(blank=True, null=True)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datacore.language",
                    ),
                ),
                (
                    "phrase_collections",
                    models.ManyToManyField(to="datacore.phrasecollection"),
                ),
                (
                    "phrases",
                    models.ManyToManyField(
                        related_name="document_phrase", to="datacore.phrase"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Definition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(null=True)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.language",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="datasource",
            name="references",
            field=models.ManyToManyField(
                related_name="data_source_reference", to="datacore.reference"
            ),
        ),
        migrations.CreateModel(
            name="Corpora",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=1024, null=True)),
                ("description", models.TextField(null=True)),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                ("documents", models.ManyToManyField(to="datacore.document")),
                (
                    "phrase_collections",
                    models.ManyToManyField(to="datacore.phrasecollection"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Concept",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pos",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ADJ", "adjective"),
                            ("ADP", "adposition"),
                            ("ADV", "adverb"),
                            ("POS_AUX", "auxiliary"),
                            ("CCONJ", "coordinating conjunction"),
                            ("POS_DET", "determiner"),
                            ("INTJ", "interjection"),
                            ("NOUN", "noun"),
                            ("NOUN.ADR", "Address"),
                            ("NOUN.DAT", "Date"),
                            ("NOUN.MAI", "Email address"),
                            ("NOUN.HOU", "Hour"),
                            ("NOUN.MEA", "Measure"),
                            ("NOUN.MON", "Money"),
                            ("NOUN.PCT", "Percentage"),
                            ("NOUN.PHO", "Phone number"),
                            ("NOUN.WEB", "Web address"),
                            ("NUM", "numeral"),
                            ("X", "other"),
                            ("PARTICLE", "particle"),
                            ("PRON", "pronoun"),
                            ("PROPN", "proper noun"),
                            ("PROPN.BLD", "A building"),
                            ("PROPN.COM", "A business/company"),
                            ("PROPN.DEV", "A device"),
                            ("PROPN.DOC", "A document"),
                            ("PROPN.FDD", "A food/beverage"),
                            ("PROPN.NPH", "A human being"),
                            ("PROPN.LEN", "A legal/fiscal entity"),
                            ("PROPN.MMD", "A mass media"),
                            ("PROPN.GEA", "A physical geographic feature"),
                            ("PROPN.PRD", "A product"),
                            ("PROPN.VCL", "A vehicle"),
                            ("PROPN.WRK", "a work of human intelligence"),
                            ("PROPN.GEO", "An administrative geographic area"),
                            ("PROPN.ANM", "An animal"),
                            ("PROPN.EVN", "An event"),
                            ("PROPN.GEX", "An extra-terrestrial or imaginary place"),
                            ("PROPN.PPH", "An physical phenomena"),
                            ("PROPN.ORG", "organization/society/institution"),
                            ("POS_PUNCT", "punctuation"),
                            ("SCONJ", "subordinating conjunction"),
                            ("SYM", "symbol"),
                            ("VERB", "verb"),
                        ],
                        max_length=64,
                        null=True,
                        verbose_name="Part of Speech",
                    ),
                ),
                ("usage_count", models.BigIntegerField(default=0)),
                ("source_offset", models.BigIntegerField(null=True)),
                ("data", models.JSONField(default=dict)),
                (
                    "antonyms",
                    models.ManyToManyField(
                        related_name="lemma_antonym", to="datacore.word"
                    ),
                ),
                (
                    "axiom",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.axiom",
                    ),
                ),
                (
                    "data_sources",
                    models.ManyToManyField(blank=True, to="datacore.datasource"),
                ),
                (
                    "definitions",
                    models.ManyToManyField(
                        related_name="concept_definition", to="datacore.definition"
                    ),
                ),
                (
                    "examples",
                    models.ManyToManyField(
                        related_name="concept_examples", to="datacore.example"
                    ),
                ),
                (
                    "ontology_domain",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datacore.domainontology",
                    ),
                ),
                (
                    "synonyms",
                    models.ManyToManyField(
                        related_name="lemma_synonym", to="datacore.word"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Component",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                (
                    "description",
                    models.TextField(blank=True, max_length=4096, null=True),
                ),
                (
                    "slug",
                    models.CharField(
                        blank=True, db_index=True, max_length=512, unique=True
                    ),
                ),
                ("code", models.CharField(blank=True, max_length=64, null=True)),
                ("codes", models.JSONField(blank=True, default=dict)),
                (
                    "component_type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=512),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="datacore.component",
                    ),
                ),
                (
                    "references",
                    models.ManyToManyField(
                        blank=True,
                        related_name="component_reference",
                        to="datacore.reference",
                    ),
                ),
            ],
            options={
                "verbose_name": "Linguistic Component",
                "verbose_name_plural": "Linguistic Components",
            },
        ),
        migrations.AddField(
            model_name="attribute",
            name="property",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="datacore.property",
            ),
        ),
        migrations.CreateModel(
            name="Analyzer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                ("version", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "references",
                    models.ManyToManyField(
                        related_name="analyzer_reference", to="datacore.reference"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhraseAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sentiment",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MaxValueValidator(1.0),
                            django.core.validators.MinValueValidator(-1.0),
                        ],
                    ),
                ),
                (
                    "phrase_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("None", "declarative"),
                            ("None", "exclamative"),
                            ("None", "Expressed Condition"),
                            ("None", "Imperative"),
                            ("None", "Incomplete"),
                            ("None", "Interrogative"),
                            ("PROVERB", "Proverb"),
                            ("EXPS", "Expression"),
                            ("IDM", "Idiom"),
                            ("PRVB", "Proveb"),
                            ("SYNG", "Saying"),
                            ("SLNG", "Slang"),
                            ("REFERENCE", "Reference"),
                        ],
                        max_length=64,
                        null=True,
                    ),
                ),
                ("data", models.JSONField(default=dict)),
                (
                    "analyzer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datacore.analyzer",
                    ),
                ),
                (
                    "entities",
                    models.ManyToManyField(
                        related_name="used_ne", to="datacore.namedentity"
                    ),
                ),
                (
                    "phrase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datacore.phrase",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phrase_template",
                        to="datacore.template",
                    ),
                ),
                ("words", models.ManyToManyField(to="datacore.word")),
            ],
            options={
                "unique_together": {("phrase", "analyzer")},
            },
        ),
    ]
